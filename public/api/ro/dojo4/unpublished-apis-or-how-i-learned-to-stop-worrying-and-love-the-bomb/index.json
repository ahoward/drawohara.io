{
  "data": {
    "dojo4/unpublished-apis-or-how-i-learned-to-stop-worrying-and-love-the-bomb": {
      "author": "michael@dojo4.com",
      "title": "Unpublished APIs or, How I Learned to Stop Worrying and Love the Bomb.",
      "published_at": "2014-04-16 17:48:12 UTC",
      "body": "<div class=\"ro markdown\">\n  <p>Sometimes you have some boring repetitive online task or you need to automate some or all of a workflow on a website. Scripting these interactions can prevent us from wasting tons of man hours on mundanely clicking through the same pages on a site.</p>\n\n<p>A lot of us will reach for <a href=\"http://mechanize.rubyforge.org/\">Mechanize</a> right off the bat. Then you find that the UI for the site you’re trying to automate a task for is JavaScript heavy or AJAXy. Now what do you use?</p>\n\n<p><a href=\"http://http://phantomjs.org/\">Phantomjs</a> to the rescue. Phantomjs is a fast, easily scriptable, headless WebKit browser. When the job fails for whatever reason, you can snap a screenshot to review. For us this meant emailing it to an admin since the jobs are running on servers and not locally. We are also using <a href=\"https://github.com/westoque/phantomjs.rb\">Phantomjs.rb</a> to handle the path and output from Phantomjs.</p>\n\n<p>Here’s a bit of code from what we are doing.</p>\n\n<pre><code>class InvitationAcceptor\n  attr_accessor :invitation, :tmpdir\n\n  def initialize(invitation)\n    self.invitation = invitation\n  end\n\n  def accept!\n    fail_image_path = false\n\n    Dir.mktmpdir(invitation.id.to_s) do |tmpdir|\n      self.tmpdir = tmpdir\n\n      Phantomjs.inline(js) do |line|\n        puts line\n        fail_image_path = line.gsub('FAIL:', '').chomp if line.starts_with?('FAIL')\n      end\n\n      if fail_image_path\n        Mailer.invitaion_failed(invitation, fail_image_path).deliver\n      else\n        invitation.invitation_accepted!\n      end\n    end\n  end\n\n  private\n\n    def js\n      fail_image = \"#{tmpdir}/failed.png\"\n\n      &lt;&lt;-JS\n        // https://github.com/ariya/phantomjs/blob/master/examples/waitfor.js\n        function waitFor(testFx, onReady, timeOutMillis) {\n          var maxtimeOutMillis = timeOutMillis ? timeOutMillis : 10000,\n            start = new Date().getTime(),\n            condition = false\n          var interval = setInterval(function() {\n            if ((new Date().getTime() - start &lt; maxtimeOutMillis) &amp;&amp; !condition) {\n              condition = (typeof(testFx) === \"string\" ? eval(testFx) : testFx());\n            } else {\n              if (! condition) {\n                fail()\n              } else {\n                console.log(\"'waitFor()' waited \" + (new Date().getTime() - start) + \"ms.\");\n                typeof(onReady) === \"string\" ? eval(onReady) : onReady();\n                clearInterval(interval);\n              }\n            }\n          }, 250);\n        };\n\n        var page = require('webpage').create(),\n          testindex = 0,\n          loadInProgress = false,\n          tries = 0;\n\n        // this is important for our app because the site we're automating tries to block automation.\n        page.settings.userAgent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.116 Safari/537.36'\n\n        var fail = function() {\n          // send the fail message and image path to the Ruby script\n          console.log(\"FAIL:#{fail_image}\");\n          // save the screenshot to the file system so it can be emailed\n          page.render(\"#{fail_image}\");\n          phantom.exit()\n        }\n\n        page.onConsoleMessage = function(msg) {\n          console.log(msg);\n        };\n\n        page.onLoadStarted = function() {\n          loadInProgress = true;\n          console.log(\"load started\");\n        };\n\n        page.onLoadFinished = function(status) {\n          loadInProgress = false;\n          console.log(\"load finished\");\n        };\n\n        var steps = [\n          function() {\n            console.log(\"Load Login Page\");\n\n            page.open(\"#{invitation.invitation_received.subject}\")\n          },\n          function() {\n            console.log(\"Verify the invitation is still valid\");\n\n            success = page.evaluate(function() {\n              if (null == document.getElementById('hasSomeElement')) {\n                return false;\n              }\n\n              return true;\n            })\n\n            if (! success) {\n              fail();\n            }\n\n          },\n          function() {\n            console.log(\"Enter Credentials\");\n\n            page.evaluate(function() {\n              document.getElementById('hasSomeElement').checked;\n              document.getElementById('hasSomeElement').checked;\n              document.getElementById('email').value = '#{invitation.email}';\n              document.getElementById('password').value = '#{invitation.password}';\n              document.getElementById('login').click();\n            });\n          },\n          function() {\n            console.log(\"Accepting the terms\");\n\n            page.evaluate(function() {\n              document.getElementById('accept').click()\n            });\n          },\n          function() {\n            console.log(\"Waiting for the JS craziness to complete\");\n\n            waitFor(function() {\n              return page.evaluate(function() {\n                return document.getElementsByClassName('someExpectedContent').length != 0\n              });\n            }, function() {\n              phantom.exit();\n            });\n          }\n        ]\n\n        interval = setInterval(function() {\n          if (!loadInProgress &amp;&amp; typeof steps[testindex] == \"function\") {\n            steps[testindex]();\n            // useful for debugging\n            page.render(\"#{tmpdir}/step\" + (testindex + 1) + \".png\");\n            testindex++;\n          }\n        }, 250);\n      JS\n    end\n\nend\n</code></pre>\n\n<p>You can also inject scripts into the page, with <a href=\"http://phantomjs.org/api/webpage/method/inject-js.html\">injectJs</a> or <a href=\"http://phantomjs.org/api/webpage/method/include-js.html\">includeJs</a> but I prefer to stick to what is already there or just use the basics to avoid any clashes with what may be in the page already.</p>\n\n</div>\n",
      "assets": {},
      "_meta": {
        "identifier": "dojo4/unpublished-apis-or-how-i-learned-to-stop-worrying-and-love-the-bomb",
        "type": "dojo4",
        "id": "unpublished-apis-or-how-i-learned-to-stop-worrying-and-love-the-bomb",
        "urls": [
          "/ro/dojo4/unpublished-apis-or-how-i-learned-to-stop-worrying-and-love-the-bomb/body.md"
        ],
        "created_at": "2025-05-06 08:47:14 +0000",
        "updated_at": "2025-05-06 08:47:14 +0000",
        "rel": {
          "curr": "dojo4/unpublished-apis-or-how-i-learned-to-stop-worrying-and-love-the-bomb",
          "prev": "dojo4/using-redis-with-sensitive-information",
          "next": "dojo4/it-s-business-time-10-tips-for-doing-it-better"
        }
      }
    }
  },
  "_meta": {
    "url": "/ro",
    "type": "dojo4",
    "id": "unpublished-apis-or-how-i-learned-to-stop-worrying-and-love-the-bomb"
  }
}