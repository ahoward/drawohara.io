{
  "data": {
    "dojo4/so-you-think-youre-a-web-developer-eh": {
      "title": "So you think you're a web developer eh?",
      "published_at": "2012-09-26 00:00:00 UTC",
      "author": "ara@dojo4.com",
      "body": "<pre style='font-size:1.0em;background-color:#ffe;padding:1em;'>\nSo you think you wanna be a web developer...\n\nFork <a target='_blank' href='https://gist.github.com/3788769'>https://gist.github.com/3788769</a> and update your copy with answers.\n\nThey don't need to be precise - pseudo-code is fine in most cases.\n\nSome questions don't have correct answers.\n\n\nSubmit your answers to ara@dojo4.com\n\n\n  FROM: you@yeraaddy.com\n\n  SUBJECT: [dojo4-quiz] quiz-1\n\n  BODY:\n\n    https://gist.github.com/to-your-submission\n</pre>\n\n<p><br />\n<br />\nref: <a target='_blank' href=\"https://gist.github.com/3788769\">https://gist.github.com/3788769</a>\n<br /></p>\n\n<hr />\n\n<p><br />\n<br /></p>\n\n<h1></h1>\n\n<h1>1. is this broken in html5? if so why?</h1>\n<div class=\"highlight\"><pre>  <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">&#39;teh_javascripts&#39;</span> <span class=\"nt\">/&gt;</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>2. write an http GET request for the url</h1>\n<div class=\"highlight\"><pre>  <span class=\"s1\">&#39;http://domain.com:4242/foo/bar/baz.html&#39;</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>3. in any language you choose, write this to run in parallel</h1>\n<div class=\"highlight\"><pre>  <span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n\n  <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"o\">[]</span>\n\n  <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">number</span><span class=\"o\">|</span>\n    <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span> <span class=\"n\">parallelize</span><span class=\"p\">{</span> <span class=\"n\">number</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"p\">}</span> <span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n\n  <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">reduce</span><span class=\"p\">(</span> <span class=\"n\">results</span> <span class=\"p\">)</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>4. in any language you choose, write this to run in parallel on multiple cores</h1>\n<div class=\"highlight\"><pre>  <span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n\n  <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"o\">[]</span>\n\n  <span class=\"n\">numbers</span><span class=\"o\">.</span><span class=\"n\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">number</span><span class=\"o\">|</span>\n    <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span> <span class=\"n\">parallelize</span><span class=\"p\">{</span> <span class=\"n\">number</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"p\">}</span> <span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n\n  <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">reduce</span><span class=\"p\">(</span> <span class=\"n\">results</span> <span class=\"p\">)</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>5. is this broken in html5?, why?</h1>\n<div class=\"highlight\"><pre>  <span class=\"nt\">&lt;label</span> <span class=\"na\">for=</span><span class=\"s\">&#39;user.email&#39;</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;input</span> <span class=\"na\">name=</span><span class=\"s\">&#39;user.email&#39;</span><span class=\"nt\">&gt;</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>6. what is value of &#39;status&#39;</h1>\n<div class=\"highlight\"><pre>  <span class=\"k\">if</span> <span class=\"vi\">@not_modified</span>\n    <span class=\"n\">render</span> <span class=\"ss\">:status</span> <span class=\"o\">=&gt;</span> <span class=\"n\">status</span>\n  <span class=\"k\">end</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>7. is this javascript broken?  if so, why?</h1>\n<div class=\"highlight\"><pre>  <span class=\"kd\">var</span> <span class=\"nx\">submit</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">&quot;submit&quot;</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">submit</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>8. which is better?  why? </h1>\n<div class=\"highlight\"><pre><span class=\"c\">&lt;!-- A --&gt;</span>\n\n  <span class=\"nt\">&lt;table&gt;</span>\n    <span class=\"nt\">&lt;tr&gt;</span>\n      <span class=\"nt\">&lt;td</span> <span class=\"na\">class=</span><span class=\"s\">&#39;key&#39;</span> <span class=\"na\">style=</span><span class=\"s\">&#39;width:33%&#39;</span><span class=\"nt\">&gt;</span>\n        {{ dynamic_content_for(:key) }}\n      <span class=\"nt\">&lt;/td&gt;</span>\n      <span class=\"nt\">&lt;td</span> <span class=\"na\">class=</span><span class=\"s\">&#39;val&#39;</span><span class=\"nt\">&gt;</span>\n        {{ dynamic_content_for(:val) }}\n      <span class=\"nt\">&lt;/td&gt;</span>\n    <span class=\"nt\">&lt;/tr&gt;</span>\n  <span class=\"nt\">&lt;/table&gt;</span>\n\n<span class=\"c\">&lt;!-- B --&gt;</span>\n\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&#39;fluid grid&#39;</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">&#39;row&#39;</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">&#39;key width33&#39;</span><span class=\"nt\">&gt;</span>\n        {{ dynamic_content_for(:key) }}\n      <span class=\"nt\">&lt;/span&gt;</span>\n      <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">&#39;val&#39;</span><span class=\"nt\">&gt;</span>\n        {{ dynamic_content_for(:val) }}\n      <span class=\"nt\">&lt;/span&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>9. which is better?  why? </h1>\n<div class=\"highlight\"><pre><span class=\"c1\"># A</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">var</span> <span class=\"o\">==</span> <span class=\"mi\">42</span>\n    <span class=\"s2\">&quot;...&quot;</span>\n  <span class=\"k\">end</span>\n\n<span class=\"c1\"># B</span>\n\n  <span class=\"k\">if</span> <span class=\"mi\">42</span> <span class=\"o\">==</span> <span class=\"n\">var</span>\n    <span class=\"s2\">&quot;...&quot;</span>\n  <span class=\"k\">end</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>10. describe steps to debug this problem </h1>\n<div class=\"highlight\"><pre>  <span class=\"vi\">@response</span> <span class=\"o\">=</span>\n    <span class=\"n\">http_request</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"ss\">:method</span> <span class=\"o\">=&gt;</span> <span class=\"nb\">method</span><span class=\"p\">,</span> <span class=\"ss\">:params</span> <span class=\"o\">=&gt;</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"ss\">:headers</span> <span class=\"o\">=&gt;</span> <span class=\"n\">headers</span><span class=\"p\">)</span>\n\n  <span class=\"k\">if</span> <span class=\"vi\">@response</span><span class=\"o\">.</span><span class=\"n\">ok?</span>\n    <span class=\"n\">ship_it!</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">debugger!</span>\n  <span class=\"k\">end</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>11. which is better?  why? </h1>\n<div class=\"highlight\"><pre><span class=\"c1\"># A</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"o\">.</span><span class=\"n\">baz</span>\n    <span class=\"s1\">&#39;...&#39;</span>\n  <span class=\"k\">end</span>\n\n<span class=\"c1\"># B</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">foo</span>\n    <span class=\"k\">if</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span>\n      <span class=\"k\">if</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"o\">.</span><span class=\"n\">baz</span>\n        <span class=\"s1\">&#39;...&#39;</span>\n      <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>12. is this javascript broken? if so, why?</h1>\n<div class=\"highlight\"><pre>  <span class=\"nx\">ajax</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">)({</span>\n\n    <span class=\"s1\">&#39;method&#39;</span>  <span class=\"o\">:</span> <span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">,</span>\n\n    <span class=\"s1\">&#39;params&#39;</span>  <span class=\"o\">:</span> <span class=\"nx\">params</span><span class=\"p\">,</span>\n\n    <span class=\"s1\">&#39;headers&#39;</span> <span class=\"o\">:</span> <span class=\"nx\">headers</span>\n\n  <span class=\"p\">});</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>13. what color is this? </h1>\n<div class=\"highlight\"><pre>  <span class=\"s1\">&#39;#FFE&#39;</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>14. what number is this?</h1>\n<div class=\"highlight\"><pre>  <span class=\"m-Bin\">0b101010</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>15. describe an algorithm to detect the &#39;edges&#39; in these pixels </h1>\n\n<pre>\n\n  0 0 0 0 0 0\n  0 0 1 1 1 0\n  0 1 1 1 1 0\n  0 1 1 1 0 0\n  0 0 0 0 0 0\n\n</pre>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>15. what does @X represent? </h1>\n<div class=\"highlight\"><pre>  <span class=\"vg\">$color</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"vi\">@X</span><span class=\"p\">,</span> <span class=\"vi\">@R</span><span class=\"p\">,</span> <span class=\"vi\">@G</span><span class=\"p\">,</span> <span class=\"vi\">@B</span><span class=\"o\">].</span><span class=\"n\">as_hex</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>16. what are the advantages of static linking?</h1>\n<div class=\"highlight\"><pre>  <span class=\"nb\">export </span><span class=\"nv\">HINT</span><span class=\"o\">=</span><span class=\"nv\">$LD_RUN_PATH</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>17. wtf is this javascript doing? </h1>\n<div class=\"highlight\"><pre>     <span class=\"kd\">var</span> <span class=\"nx\">uploader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">qq</span><span class=\"p\">.</span><span class=\"nx\">FileUploader</span><span class=\"p\">(</span><span class=\"nx\">options</span><span class=\"p\">);</span>\n\n     <span class=\"kd\">var</span> <span class=\"nx\">image_ids</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n\n     <span class=\"nx\">uploader</span><span class=\"p\">.</span><span class=\"nx\">_uploadFileList</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n       <span class=\"nx\">image_ids</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n       <span class=\"kd\">var</span> <span class=\"nx\">args</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">.</span><span class=\"nx\">call</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">);</span>\n       <span class=\"kd\">var</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">qq</span><span class=\"p\">.</span><span class=\"nx\">FileUploaderBasic</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">_uploadFileList</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"nx\">uploader</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">);</span>\n       <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n     <span class=\"p\">};</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>18. what does this code do?</h1>\n<div class=\"highlight\"><pre>  <span class=\"nx\">jQuery</span><span class=\"p\">(</span><span class=\"s1\">&#39;.help&#39;</span><span class=\"p\">).</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">).</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s1\">&#39;tabindex&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;-1&#39;</span><span class=\"p\">);</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>19. how would you solve this problem?</h1>\n<div class=\"highlight\"><pre>  ~ &gt; run_api_tests_locally\n\n\n    <span class=\"s2\">&quot;FAIL: you must access teh API from a box on EC2 with IP 1.2.3.4!&quot;</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n\n<h1></h1>\n\n<h1>20. which is better?  why? </h1>\n<div class=\"highlight\"><pre><span class=\"c1\">// A</span>\n\n  <span class=\"nx\">User</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">first_name</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"sr\">/\\s+/</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n  <span class=\"p\">};</span>\n\n<span class=\"c1\">// B</span>\n\n  <span class=\"nx\">User</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">first_name</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">User</span><span class=\"p\">.</span><span class=\"nx\">first_name_for</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"nx\">User</span><span class=\"p\">.</span><span class=\"nx\">first_name_for</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">){</span>\n    <span class=\"k\">return</span> <span class=\"nx\">name</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"sr\">/\\s+/</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n  <span class=\"p\">};</span>\n</pre>\n</div>\n\n<hr>\n\n<p>teh answerz...</p>\n",
      "assets": {},
      "_meta": {
        "identifier": "dojo4/so-you-think-youre-a-web-developer-eh",
        "type": "dojo4",
        "id": "so-you-think-youre-a-web-developer-eh",
        "urls": [
          "/ro/dojo4/so-you-think-youre-a-web-developer-eh/body.html"
        ],
        "created_at": "2025-05-06 08:47:14 +0000",
        "updated_at": "2025-05-06 08:47:14 +0000",
        "rel": {
          "curr": "dojo4/so-you-think-youre-a-web-developer-eh",
          "prev": "dojo4/hello-goodbye-dojo4",
          "next": "dojo4/bring-the-noise-or-not"
        }
      }
    }
  },
  "_meta": {
    "url": "/ro",
    "type": "dojo4",
    "id": "so-you-think-youre-a-web-developer-eh"
  }
}